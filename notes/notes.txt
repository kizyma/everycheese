conda --version - to make sure conda was installed properly
conda update conda
conda create -n hellodjango python=3.8
conda activate hellodjango
conda deactivate
pip install django - pip is part of packages inside the conda env, and we install it from there
django-admin startproject hellodjango - start new Django project
cd to the hellodjango root folder
python manage.py migrate - for initial DB creation (along with some basic structure)
python manage.py runserver
python manage.py createsuperuser - create Django superuser
python manage.py startapp homepage - create first sample appllication
mkdir templates - on the same level as manage.py

conda create -n everycheese python=3.8 - new env for different project
conda install -c conda-forge cookiecutter -first library for the new project
https://github.com/feldroy/django-crash-starter - repo for cookiecutter library
cookiecutter gh:roygreenfeld/django-crash-starter - corresponding command
conda activate everycheese - just in case

IMPORTANT
MAKE SURE YOU HAVE POSTGRESQL INSTALLED AND RUNNING
psql --version
createdb

If you are on Windows 10 - you are out of luck. Try installing the package and use the following instruction to add it to the sys PATH
https://stackoverflow.com/questions/30401460/postgres-psql-not-recognized-as-an-internal-or-external-command

When, inevitably, you will be kicked in the teeth by allmighty postgres, run following command:
createdb -U postgres everycheese

Instead of postgres use your superuser login, else you are out of luck.


Use the following command to start and get requirements for local development, make sure you are in the project folder.
pip install -r requirements/local.txt

CHANGED DATABASES dict in Django settings of everycheese project to hard-coded stuff temporarily
git init - in everycheese project folder
git remote add origin git@github.com:USERNAME/everycheese.git
git add .
git commit -m "Boilerplate files generated from the django-crash-starter" - initial commit message
git pull origin master --allow-unrelated-histories - I made an oopsie while creating project repo, this helps
git push -f origin master - yeah, I re-wrote remote, cause I am not very good with GIT
git log 

DJANGO_EMAIL_BACKEND - for local development
"django.core.mail.backends.console.EmailBackend" - so all emails will be visible in the local console

python manage.py makemigrations users - after we added additional field to the user model
python manage.py migrate users

git status -  to track changes we made
git add -A - add all changed files
coverage run -m pytest - run pre-configured test suite

coverage report - coverage is a library that scans the project and ensures we have everything configured properly
coverage html - same coverage report, but in HTML format


python manage.py startapp cheeses - created new Django appllication
move cheeses everycheese/ - moved it inside the internal everycheese folder, in case of non-Win platforms, use mv
conda install -c conda-forge django-autoslug - autoslug is needed for the new model, in order for it to properly migrate

conda env remove --name everycheese - removed broken env due to various heck-ups during development
python manage.py makemigrations cheeses - once all conflicts were resolved and we re-made the env
python manage.py migrate cheeses

python manage.py shell_plus - loads all Django settings from manage.py and also auto-loads all models
 cheese = Cheese.objects.create(name='Colby', description='Similar to Cheddar but without undergoing the same process', firmness=Cheese.Firmness.SEMI_HARD) - instantiate & create new record in the DATABASES

Once commited changes to the repo, run test coverage. New functionality is not fully covered. Thus, we have to create tests infrastructure inside cheeses app.


python manage.py createsuperuser - Admin access again!
In admin.py of our new app register the model!

from .models import Cheese
admin.site.register(Cheese)

django-countries==7.2.1 - added it to the base requirements document
pip install -r requirements/local.txt - and installed it from the base requirements document, lewl 


Once we are done with Django user forms, it is time to somewhat properly style them.
In order to do that, we should use Django Crispy forms {% load crispy_forms_tags %}

When we added creator field to the DB, we need to populate DB with author data, like in the example below via shell_plus

cheesehead = User.objects.get(username='cheesehead')

In [2]: for cheese in Cheese.objects.all():
   ...:     cheese.creator = cheesehead
   ...:     cheese.save()

When we added creator field to the test factory, we should test it via shell_plus
In [1]: from everycheese.cheeses.tests.factories import CheeseFactory

In [2]: cheese = CheeseFactory()

In [3]: cheese.creator
Out[3]: <User: braywarren>

In [4]: cheese.delete()
Out[4]: (1, {'cheeses.Cheese': 1})

In [5]: u = User.objects.last()

In [6]: u
Out[6]: <User: braywarren>

Don`t forget to clean up your data once you`ve manually tested it!